name: Create Release
on:
  workflow_dispatch:
  push:

defaults:
  run:
    shell: bash

env:
  BOSH_DEPLOYMENT:      cf-cli-test
  BOSH_NON_INTERACTIVE: true

jobs:
  bosh_release_create_candidate:
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/chinigorg/bosh-package-cf-cli-release-ci:187042013-release-workflow-latest"

    steps:
    - name: Checkout cli bosh release repo
      uses: actions/checkout@v4

    - name: Acquire latest CF CLI binaries
      run: |
        ./ci/scripts/download-cf-cli-binary.sh --major-version 7 --output-dir ./build/cf-cli-binaries
        ./ci/scripts/download-cf-cli-binary.sh --major-version 8 --output-dir ./build/cf-cli-binaries

    - name: Compare latest CF CLI binaries against latest published BOSH release
      id: compare-manifest-against-binaries
      run: |
        ./ci/scripts/compare-against-published-bosh-release.sh --downloaded-binaries-dir ./build/cf-cli-binaries >> $GITHUB_OUTPUT

    - name: Create bosh release candidate
      if: steps.compare-manifest-against-binaries.outputs.blobs_updated == 'true'
      run: |
        ./ci/scripts/create-bosh-release-candidate.sh --downloaded-binaries-dir ./build/cf-cli-binaries

    # - name: Push changes
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: ${{ github.ref }}

    # - name: Claim environment with provided pool_name and pool_namespace
    #   id:   claim-env
    #   uses: a-b/gha-shepherd@main
    #   with:
    #     debug:        ${{ runner.debug }}
    #     api_token:    ${{ secrets.SHEPHERD_API_TOKEN }}
    #     api_endpoint: ${{ vars.SHEPHERD_API_ENDPOINT }}
    #     pool_name:      cfd-29
    #     pool_namespace: official
    #     namespace:      tas-devex
    #     duration:       1h

    # - name: Get metadata.json
    #   uses: a-b/gha-shepherd@main
    #   with:
    #     debug:        ${{ runner.debug }}
    #     api_token:    ${{ secrets.SHEPHERD_API_TOKEN }}
    #     api_endpoint: ${{ vars.SHEPHERD_API_ENDPOINT }}
    #     namespace:    tas-devex
    #     run: |
    #       # shepherd list pool --namespace "${NAMESPACE:?}"

    #       sleep 360
          
    #       lease_id="${{ steps.claim-env.outputs.env-id }}"
    #       shepherd get lease "${lease_id:?}" \
    #       --namespace tas-devex \
    #       --json \
    #       | jq -r \
    #           --sort-keys \
    #       > lease.json
    #       cat lease.json | jq --sort-keys

    # - name: Deploy and run tests
    #   run: |
    #     set -x -o errexit -o nounset -o pipefail
    #     set -o xtrace

    #     install_location=/usr/local/bin

    #     # latest_bbl_url=$(curl -s https://api.github.com/repos/cloudfoundry/bosh-bootloader/releases/latest | \
    #     #   jq -r ".assets[] | select(.name | test(\"^bbl-.*_linux_amd64$\")) | .browser_download_url")
    #     # curl ${latest_bbl_url:?} --silent --output $install_location/bosh --location
    #     # chmod +x $install_location/bbl
    #     # bbl --version

    #     # latest_bosh_url=$(curl -s https://api.github.com/repos/cloudfoundry/bosh-cli/releases/latest | \
    #     #   jq -r ".assets[] | select(.name | test(\"^bosh-cli-.*-linux-amd64$\")) | .browser_download_url")
    #     # curl ${latest_bosh_url:?} --silent --output $install_location/bosh --location
    #     # chmod +x $install_location/bosh
    #     # bosh --version

    #     # apt-get install ca-certificates

    #     jq -r .output lease.json > metadata.json

    #     cat metadata.json | jq --sort-keys

    #     env_name=$(jq -r .name metadata.json)
    #     jq -r .bosh.jumpbox_private_key metadata.json > /tmp/${env_name}.priv
    #     eval "$(bbl print-env --metadata-file metadata.json)"

    #     bosh delete-deployment --force

    #     ## Store tgz with bosh release candidate
    #     # mv .dev_builds /tmp
    #     bosh deployments

    #     ls -lah . v?-cli-binary

    #     bosh blobs
    #     bosh remove-blob cf7-cli_7.7.10_linux_x86-64.tgz
    #     bosh add-blob v7-cli-binary/cf7-cli_7.7.10_linux_x86-64.tgz cf7-cli_7.7.10_linux_x86-64.tgz
    #     bosh blobs
    #     bosh remove-blob cf8-cli_8.7.10_linux_x86-64.tgz
    #     bosh add-blob v8-cli-binary/cf8-cli_8.7.10_linux_x86-64.tgz  cf8-cli_8.7.10_linux_x86-64.tgz
    #     bosh blobs


    #     bosh create-release --timestamp-version --tarball=/tmp/cf-cli-dev-release.tgz \
    #       --force #TODO: remove me export tgz for assets

    #     bosh deploy ./manifests/test.yml
    #     bosh run-errand cf-cli-7-linux-test
    #     bosh run-errand cf-cli-8-linux-test
    #     bosh delete-deployment
    #     bosh clean-up --all

    # - name: Unclaim environment with provided env_id and namespace
    #   if:   always()
    #   uses: a-b/gha-shepherd@main
    #   with:
    #     debug:        ${{ runner.debug }}
    #     api_token:    ${{ secrets.SHEPHERD_API_TOKEN }}
    #     api_endpoint: ${{ vars.SHEPHERD_API_ENDPOINT }}
    #     env_id:       ${{ steps.claim-env.outputs.env-id }}
    #     namespace:    tas-devex

    # ## Finalize bosh release
    # ## Get final release from assets
    # ## Push commit with final release
    # - name: Finalize bosh release
    #   if: steps.create-bosh-release-candidate-step.outputs.blobs_updated == 'yes'
    #   env:
    #     TRACE: ${{ runner.debug }}
    #   run: |
    #     set -o errexit -o nounset -o pipefail
    #     [[ "${TRACE:-0}" == "1" ]] && set -o xtrace

    #     if [[ "${{ steps.create-bosh-release-candidate-step.outputs.blobs_updated }}" == "yes" ]]; then

    #     echo "Bosh Blobs: initial state"
    #     bosh blobs

    #     ## Determine next release version number

    #     RELEASE_VERSION=$(cat release-version/version)
    #     git config --global --add safe.directory "$(pwd)"
    #     git config user.name  "github-actions[bot]"
    #     git config user.email "41898282+github-actions[bot]@users.noreply.github.com "

    #     bosh create-release --final --version="${RELEASE_VERSION}" --tarball="./cf-cli-v${RELEASE_VERSION}.tgz"

    #     git add --all
    #     git status
    #     git commit -m "create final release ${RELEASE_VERSION}"

    #     ls -lah ./candidate-release-output/cf-cli-dev-release.tgz

    # - name: Setup tmate session
    #   if: ${{ always() && runner.debug }}
    #   uses: mxschmitt/action-tmate@v3
    #   timeout-minutes: 20
