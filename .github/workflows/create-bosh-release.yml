name: Create Release
on:
  workflow_dispatch:
  push:

defaults:
  run:
    shell: bash
    # working-directory: ${{ }}

jobs:
  bosh_release_create_candidate:
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.actor }}/bosh-package-cf-cli-release-ci:187042013-release-workflow-latest"

    steps:
    - name: Checkout cli bosh release repo
      uses: actions/checkout@v4

    # - name: Acquire latest CF CLI V8
    #   run: |
    #     mkdir -p v8-cli-binary
    #     cd v8-cli-binary
    #     wget --trust-server-names "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v8&source=bosh-package-cf-cli-release-workflow"
    #     tar -xvzf cf8-cli_*_linux_x86-64.tgz --wildcards 'cf*'
    #     ./cf version

    # - name: Create bosh release candidate
    #   id: create-bosh-release-candidate-step
    #   env:
    #     TRACE: ${{ runner.debug }}
    #     # S3 final release config to upload
    #     # ACCESS_KEY_ID:
    #     # SECRET_KEY:
    #   run: |
    #     source ./ci/scripts/create-bosh-release-candidate.sh
    #     create_bosh_release_candidate 8

    #     mkdir -p candidate-release-output
    #     bosh create-release --timestamp-version --tarball=./candidate-release-output/cf-cli-dev-release.tgz

    ## Store tgz with bosh release candidate

    # - name: Push changes
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: ${{ github.ref }}

    # - name: Checkout cli bosh release repo
    #   uses: actions/checkout@v4

    - name: Run arbitrary command via configured shepherd
      uses: pivotal-cf/gha-shepherd@main
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      with:
        debug:        ${{ runner.debug }}
        api_token:    ${{ secrets.API_TOKEN }}
        api_endpoint: ${{ vars.API_ENDPOINT }}
        # namespace:    tas-devex
        namespace:    official
        run: |
          echo "List all available pools"
          shepherd list pool --namespace "${NAMESPACE:?}"
          exit 0
          echo "Wont reach to this point"

    # - name: Claim environment with provided pool_name and pool_namespace
    #   id:   claim-env
    #   uses: ./
    #   with:
    #     debug:        ${{ runner.debug }}
    #     api_token:    ${{ secrets.API_TOKEN }}
    #     api_endpoint: ${{ vars.API_ENDPOINT }}
    #     # pool_name:      cfd-29-test
    #     # pool_namespace: tas-devex
    #     pool_name:      cfd-29
    #     pool_namespace: official
    #     namespace:      tas-devex
    #     duration:       1h

    # - name: Print env status
    #   run: |
    #     jq -r .status lease.json

    # - name: Unclaim environment with provided env_id and namespace
    #   if:   always()
    #   uses: ./
    #   with:
    #     debug:        ${{ runner.debug }}
    #     api_token:    ${{ secrets.API_TOKEN }}
    #     api_endpoint: ${{ vars.API_ENDPOINT }}
    #     env_id:       ${{ steps.claim-env.outputs.env-id }}
    #     namespace:    tas-devex

    #     env_name=$(jq -r .name metadata.json)
    #     cat metadata.json | jq -r '.name'
    #     echo "lease-id=$lease_id" >> "${GITHUB_OUTPUT}"










    ## Deploy cli bosh release candidate
    # - name: Deploy bosh release candidate
    #   run:
    # - get bosh cli
    #     install_location=/usr/local/bin
    #     latest_bosh_url=$(curl -s https://api.github.com/repos/cloudfoundry/bosh-cli/releases/latest \
    #       | jq -r ".assets[] | select(.name | test(\"^bosh-cli-.*-linux-amd64$\")) | .browser_download_url")

    #     curl ${latest_bosh_url:?} --silent --output $install_location/bosh --location
    #     chmod +x $install_location/bosh











#    ## Finalize bosh release
#    ##   Get final release from assets
#    ## Push commit with final release
#    - name: Finalize bosh release
#      # if: steps.create-bosh-release-candidate-step.outputs.blobs_updated == 'yes'
#      # env:
#      #   TRACE: ${{ runner.debug }}
#      # S3 final release config to upload
#      # ACCESS_KEY_ID:
#      # SECRET_KEY:
#      run: |
#        set -o errexit -o nounset -o pipefail
#        [[ "${TRACE:-0}" == "1" ]] && set -o xtrace
#
#        # if [[ "${{ steps.create-bosh-release-candidate-step.outputs.blobs_updated }}" == "yes" ]]; then
#        
#        # echo "Bosh Blobs: initial state"
#        # bosh blobs
#
#        ## Determine next release version number
#
#        # RELEASE_VERSION=$(cat release-version/version)
#        # git config --global --add safe.directory "$(pwd)"
#        # git config user.name  "github-actions[bot]"
#        # git config user.email "41898282+github-actions[bot]@users.noreply.github.com "
#
#        # bosh create-release --final --version="${RELEASE_VERSION}" --tarball="./cf-cli-v${RELEASE_VERSION}.tgz"
#
#        # git add --all
#        # git status
#        # git commit -m "create final release ${RELEASE_VERSION}"
#
#        ls -lah ./candidate-release-output/cf-cli-dev-release.tgz
#
#    # - name: Setup tmate session
#    #   if: ${{ always() && runner.debug }}
#    #   uses: mxschmitt/action-tmate@v3
#    #   timeout-minutes: 15
#