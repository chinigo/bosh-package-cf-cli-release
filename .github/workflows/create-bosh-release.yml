name: Create Release
on:
  workflow_dispatch:
  push:

defaults:
  run:
    shell: bash

env:
  BOSH_DEPLOYMENT:      cf-cli-test
  BOSH_NON_INTERACTIVE: true

jobs:
  bosh_release_create_candidate:
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.actor }}/bosh-package-cf-cli-release-ci:187042013-release-workflow-latest"

    steps:
    - name: Checkout cli bosh release repo
      uses: actions/checkout@v4

    - name: Acquire latest CF CLI V7
      run: |
        mkdir -p v7-cli-binary
        cd v7-cli-binary
        wget --trust-server-names "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=bosh-package-cf-cli-release-workflow"
        tar -xvzf cf7-cli_*_linux_x86-64.tgz --wildcards 'cf*'
        ./cf version

    - name: Acquire latest CF CLI V8
      run: |
        mkdir -p v8-cli-binary
        cd v8-cli-binary
        wget --trust-server-names "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v8&source=bosh-package-cf-cli-release-workflow"
        tar -xvzf cf8-cli_*_linux_x86-64.tgz --wildcards 'cf*'
        ./cf version

    - name: Create bosh release candidate
      id: create-bosh-release-candidate-step
      env:
        TRACE: ${{ runner.debug }}
        # S3 final release config to upload
        # ACCESS_KEY_ID:
        # SECRET_KEY:
      run: |
        source ./ci/scripts/create-bosh-release-candidate.sh
        create_bosh_release_candidate 7
        create_bosh_release_candidate 8

        bosh blobs


    # - name: Push changes
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: ${{ github.ref }}

    # - name: Run arbitrary command via configured shepherd
    #   uses: a-b/gha-shepherd@main
    #   with:
    #     debug:        ${{ runner.debug }}
    #     api_token:    ${{ secrets.SHEPHERD_API_TOKEN }}
    #     api_endpoint: ${{ vars.API_ENDPOINT }}
    #     namespace:    official
    #     run: |
    #       echo "List all available pools"
    #       shepherd list pool --namespace "${NAMESPACE:?}"
    #       exit 0
    #       echo "Wont reach to this point"

    - name: Claim environment with provided pool_name and pool_namespace
      id:   claim-env
      uses: a-b/gha-shepherd@main
      with:
        debug:        ${{ runner.debug }}
        api_token:    ${{ secrets.SHEPHERD_API_TOKEN }}
        api_endpoint: ${{ vars.API_ENDPOINT }}
        pool_name:      cfd-29
        pool_namespace: official
        namespace:      tas-devex
        duration:       1h

    - name: Deploy and run tests
      run: |

        install_location=/usr/local/bin

        latest_bbl_url=$(curl -s https://api.github.com/repos/cloudfoundry/bosh-bootloader/releases/latest | \
          jq -r ".assets[] | select(.name | test(\"^bbl-.*_linux_amd64$\")) | .browser_download_url")
        curl ${latest_bbl_url:?} --silent --output $install_location/bosh --location
        chmod +x $install_location/bbl
        bbl --version

        latest_bosh_url=$(curl -s https://api.github.com/repos/cloudfoundry/bosh-cli/releases/latest | \
          jq -r ".assets[] | select(.name | test(\"^bosh-cli-.*-linux-amd64$\")) | .browser_download_url")
        curl ${latest_bosh_url:?} --silent --output $install_location/bosh --location
        chmod +x $install_location/bosh
        bosh --version

        jq -r .output lease.json > metadata.json
        eval "$(bbl print-env --metadata-file metadata.json)"

        bosh delete-deployment --force

        ## Store tgz with bosh release candidate
        # mv .dev_builds /tmp
        bosh create-release --timestamp-version --tarball=/tmp/cf-cli-dev-release.tgz \
          --force #TODO: remove me export tgz for assets

        bosh deploy ./manifests/test.yml
        bosh run-errand cf-cli-7-linux-test
        bosh run-errand cf-cli-8-linux-test
        bosh delete-deployment
        bosh clean-up --all

    - name: Unclaim environment with provided env_id and namespace
      if:   always()
      uses: a-b/gha-shepherd@main
      with:
        debug:        ${{ runner.debug }}
        api_token:    ${{ secrets.SHEPHERD_API_TOKEN }}
        api_endpoint: ${{ vars.API_ENDPOINT }}
        env_id:       ${{ steps.claim-env.outputs.env-id }}
        namespace:    tas-devex

#    ## Finalize bosh release
#    ##   Get final release from assets
#    ## Push commit with final release
#    - name: Finalize bosh release
#      # if: steps.create-bosh-release-candidate-step.outputs.blobs_updated == 'yes'
#      # env:
#      #   TRACE: ${{ runner.debug }}
#      # S3 final release config to upload
#      # ACCESS_KEY_ID:
#      # SECRET_KEY:
#      run: |
#        set -o errexit -o nounset -o pipefail
#        [[ "${TRACE:-0}" == "1" ]] && set -o xtrace
#
#        # if [[ "${{ steps.create-bosh-release-candidate-step.outputs.blobs_updated }}" == "yes" ]]; then
#        
#        # echo "Bosh Blobs: initial state"
#        # bosh blobs
#
#        ## Determine next release version number
#
#        # RELEASE_VERSION=$(cat release-version/version)
#        # git config --global --add safe.directory "$(pwd)"
#        # git config user.name  "github-actions[bot]"
#        # git config user.email "41898282+github-actions[bot]@users.noreply.github.com "
#
#        # bosh create-release --final --version="${RELEASE_VERSION}" --tarball="./cf-cli-v${RELEASE_VERSION}.tgz"
#
#        # git add --all
#        # git status
#        # git commit -m "create final release ${RELEASE_VERSION}"
#
#        ls -lah ./candidate-release-output/cf-cli-dev-release.tgz

    - name: Setup tmate session
      if: ${{ always() && runner.debug }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 20
