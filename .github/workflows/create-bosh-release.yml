name: Create Release
on:
  workflow_dispatch:
  # push:
  #   branches:
  #   - "187042013-release-workflow"

jobs:


  acquire_binaries:
    runs-on: ubuntu-latest
    steps:

    - name: Acquire latest CF CLI V8 linux binary
      run: |
        curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=bosh-package-cf-cli-release-workflow" | tar -zx
        ./cf version

    # - name: Acquire latest CF CLI V8 linux binary
    #   run: |
    #     curl -L -o linux-binary-v8.tgz "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v8&source=bosh-package-cf-cli-release-workflow"
    #     tar -xvzf linux-binary-v8.tgz --wildcards 'cf*'
    #     ./cf version

    # - name: Acquire latest CF CLI V7 linux binary
    #   run: |
    #     curl -L -o linux-binary-v7.tgz "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=bosh-package-cf-cli-release-workflow"
    #     tar -xvzf linux-binary-v7.tgz --wildcards 'cf*'
    #     ./cf version

    # - name: Acquire latest CF CLI V6 linux binary
    #   run: |
    #     curl -L -o linux-binary-v6.tgz "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v6&source=bosh-package-cf-cli-release-workflow"
    #     tar -xvzf linux-binary-v6.tgz --wildcards 'cf*'
    #     ./cf version

    # - name: Store Linux Binaries
    #   uses: actions/upload-artifact@v4
    #   with:
    #     if-no-files-found: error
    #     name: cf-cli-linux-binaries
    #     path: cf[0-9]

  bosh_release_create_candidate:
    runs-on: ubuntu-latest
    container:
      image: 'cfcli/cli-release-base'
    steps:


    # - name: Get latest V8 release from github
    #   uses: dsaltares/fetch-gh-release-asset@master
    #   with:
    #     repo: 'dsaltares/godot-wild-jam-18'
    #     version: 'tags/v0.1.18'
    #     regex: true
    #     file: "plague-.*\\.zip"
    #     target: 'subdir/'
    #     token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Checkout cli bosh release repo
      uses: actions/checkout@v4

    #- name: Install bosh cli
      #run: |
        #install_location=/usr/local/bin
        ## bosh_cli_artifact=bosh-cli-7.0.1-linux-amd64
        ## bbl_artifact=bbl-v8.4.110_linux_x86-64
        ## credhub_artifact=credhub-linux-2.9.4.tgz
      
        ## curl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v8.4.110/${bbl_artifact} --silent --location --output  $install_location/bbl
        ## chmod +x $install_location/bbl
        ## bbl --version

        ## curl https://s3.amazonaws.com/bosh-cli-artifacts/$bosh_cli_artifact --silent --output $install_location/bosh --location
        ## chmod +x $install_location/bosh
        ## bosh --version

        ## bosh_version=7.0.1
        ## curl "https://storage.googleapis.com/bosh-cli-artifacts/bosh-cli-#{bosh_version}-linux-amd64" --silent --output $install_location/bosh --location
        ## chmod +x $install_location/bosh
        ## bosh --version

        #latest_bosh_url=$(curl -s https://api.github.com/repos/cloudfoundry/bosh-cli/releases/latest \
          #| jq -r ".assets[] | select(.name | test(\"^bosh-cli-.*-linux-amd64$\")) | .browser_download_url")

        #curl ${latest_bosh_url:?} --silent --output $install_location/bosh --location
        #chmod +x $install_location/bosh

        ## curl https://github.com/cloudfoundry/credhub-cli/releases/download/2.9.4/$credhub_artifact --silent --output /tmp/$credhub_artifact --location
        ## tar xzvf /tmp/$credhub_artifact
        ## mv credhub $install_location/credhub
        ## chmod +x $install_location/credhub
        ## credhub --version

        ## apt-get update
        ## apt-get install -y build-essential

    - name: Create bosh release candidate
      env:
        AWS_REGION:            ${{ vars.AWS_REGION }}
        AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      run: |
        bosh --version
        echo AWS_REGION: ${AWS_REGION:?}
        echo AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:?}
        echo AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:?}

    # - name: |
    #     Test Bosh release
    #     - Claim Shepherd env
    #     - Deploy release candidate
    #     - Run tests
    #     - Unclaim Sheperd env
    #   run: echo hi

    # - name: Finalize release
    #   run: echo hi

    # - name: List artifacts
    #   run: |
    #     ls -lah

    # - name: Setup upterm session
    #   # if: ${{ always() && runner.debug }}
    #   if: ${{ failure() }}
    #   uses: lhotari/action-upterm@v1
    #   timeout-minutes: 60
